message(STATUS QT_VERSION_MAJOR=${QT_VERSION_MAJOR}\n${PROJECT_NAME}_QT_VERSION=${${PROJECT_NAME}_QT_VERSION})

set (QT_LIBRARIES Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Gui Qt${QT_VERSION_MAJOR}::Xml)
set (QT_MODULES Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Gui Qt${QT_VERSION_MAJOR}::Xml)

if (WIN32)
	set (QT_PLATFORM_MODULES Qt${QT_VERSION_MAJOR}::QWindowsIntegrationPlugin)	
else(WIN32)
	set(QT_PLATFORM_MODULES Qt${QT_VERSION_MAJOR}::QXcbIntegrationPlugin)
endif(WIN32)

if(${PROJECT_NAME}_QT_VERSION VERSION_LESS "6")
	if (WIN32)
		set( QT_LIBRARIES ${QT_LIBRARIES} Qt${QT_VERSION_MAJOR}::WinMain)
		set (QT_MODULES ${QT_MODULES} Qt${QT_VERSION_MAJOR}::WinMain)
	else(WIN32)
		find_package(X11 QUIET)
		if (X11_FOUND)
			message( STATUS "Found X11: ${X11_LIBRARIES} - ${X11_INCLUDE_DIR}")
			set( QT_LIBRARIES ${QT_LIBRARIES} Qt${QT_VERSION_MAJOR}::X11Extras)
			set (QT_MODULES ${QT_MODULES} Qt${QT_VERSION_MAJOR}::X11Extras)
		else(X11_FOUND)
			message( STATUS "Did not find X11")
		endif(X11_FOUND)
	endif(WIN32)
else ()
	set( QT_LIBRARIES ${QT_LIBRARIES} Qt${QT_VERSION_MAJOR}::Core5Compat Qt${QT_VERSION_MAJOR}::StateMachine)
	set (QT_MODULES ${QT_MODULES} Qt${QT_VERSION_MAJOR}::Core5Compat Qt${QT_VERSION_MAJOR}::StateMachine)
endif()

find_qt5_packages()

find_package(QtBasicUtils REQUIRED)

find_package(libQxt CONFIG REQUIRED)